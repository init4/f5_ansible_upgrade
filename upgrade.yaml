- hosts: all 
  gather_facts: no
  #connection: local
  collections:
  - f5networks.f5_modules
  
  vars_prompt:
  - name: f5_username
    prompt: "Enter F5 Username"
    private: no
    default: "{{ lookup('env','USER') }}"
  - name: f5_password
    prompt: "Enter F5 Password"

  tasks: 
  - name: Wait For Confirmation
    pause:
      prompt: "Press <Enter> to proceed..."

  - name: Get Software Volume Information
    bigip_device_info:
      gather_subset:
        - software-volumes
      provider: "{{ provider }}"
    register: sv
  
  - name: Get Current Version
    set_fact:
      current_version: "{{ item.version }}"
      current_boot_loc: "{{ item.name }}"
    when: item.active == "yes"
    with_items: "{{ sv.software_volumes }}"
  
  - name: Set New Version from ISO name
    set_fact:
      new_ver: "{{ new_image.split('-') }}"

  - name: Identify Hosts That Require Upgrade
    set_fact:
      wants_upgrade: True
    when: not new_image is search(current_version)
  
  - name: Identify Hosts That Don't Require Upgrade
    set_fact:
      wants_upgrade: False
    when: new_image is search(current_version)

  - name: Identify Hosts need Hotfix
    set_fact:
      wants_upgrade: True
    when: 
      - new_image is search("Hotfix") 
      - new_image is search(current_version)

  - name: Identify Hosts that DO NOT need Hotfix
    set_fact:
      wants_upgrade: False
    when: 
      - new_image is search("Hotfix") 
      - not new_image is search(current_version)

  - name: Only Upgrading Devices Which Need It
    block:

    - name: Check For Only One Boot Location
      set_fact:
        dest_boot_loc: "HD1.2"
      when: (not dest_boot_loc is defined) and (sv.software_volumes|length == 1)
    
    - name: Check First Boot Location
      set_fact:
        dest_boot_loc: "{{ sv.software_volumes.0.name }}"
      when: (not dest_boot_loc is defined) and (sv.software_volumes.0.active != "yes")

    - name: Check Second Boot Location
      set_fact:
        dest_boot_loc: "{{ sv.software_volumes.1.name }}"
      when: (not dest_boot_loc is defined) and (sv.software_volumes.1.active != "yes")
    
    when: wants_upgrade

  - name: Device Version Status
    debug:
      msg: 
        - "Current version: {{ current_version }}"
        - "Desired image: {{ new_image }}"
        - "Upgrade needed: {{ wants_upgrade }}"
      
  - name: Print Upgrade Information
    debug:
      msg: 
        - "Current version: {{ current_version }} booting from {{ current_boot_loc }}"
        - "New Image '{{ new_image }}' will be uploaded from '{{ new_image_dir }}'"
        - "It will be installed to boot location '{{ dest_boot_loc }}'"
    when: wants_upgrade

  - name: Wait For Confirmation
    pause:
      prompt: "Press a key to continue..."

  - name: Save the running configuration of the BIG-IP
    bigip_config:
      provider: "{{ provider }}"
      save: yes
    when: wants_upgrade

  - name: Ensure backup directory exists
    file:
      path: "{{ backup_loc }}/{{ inventory_hostname_short }}"
      state: directory
    when: wants_upgrade
  
  #- name: Get Pre-Upgrade UCS Backup
  #  bigip_ucs_fetch:
  #    create_on_missing: yes
  #    backup: yes
  #    src: "{{ backup_pfx }}_pre-upgrade.ucs"
  #    dest: "{{ backup_loc }}/{{ inventory_hostname_short }}/{{ backup_pfx }}_pre-upgrade.ucs"
  #    provider: "{{ provider }}"
  #  when: wants_upgrade

  - name: Upload image
    bigip_software_image:
      provider: "{{ provider }}"
      image: "{{ new_image }}"
    delegate_to: localhost
    when: wants_upgrade
  
  - name: Install Image
    bigip_software_install:
      provider: "{{ provider }}"
      image: "{{ new_image }}"
      state: installed
      volume: "{{ dest_boot_loc }}"
    when: wants_upgrade

